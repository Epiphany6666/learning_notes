<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee
         http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd"
         version="3.1"><!--将web版本4.0修改为3.1，注意上一行约束文件也要修改-->

<!--    配置SpringMVC的前端控制器，对浏览器发送的请求进行统一处理-->
    <servlet>
<!--        里面的servlet-name要和servlet-mapping的servlet保持一致，这样子servlet-name和servlet-mapping就是共同来注册一个servlet的-->
        <servlet-name>SpringMVC</servlet-name>
<!--        servlet的一个全类名-->
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
        <!--        自定义SpringMVC配置文件的位置和名称-->
        <!-- init-param标签：初始化参数，它是伴随着servlet的初始化来进行初始化
        它的功能就是配置SpringMVC配置文件的位置和名称

        我们所使用的参数名一定是由SpringMVC已经在它的servlet中DispatcherServlet前端控制器中已经定义好的，我们直接在这为它赋值，然后它就会有相对应的功能
        所以我们在这里使用的参数名叫做：contextConfigLocation，即上下文配置路径

        在设置param-value的时候需要设置两个值：一个是位置，一个是名称
        在这里一定要把classpath加上，因为对应的就是类路径，也就是咱们的java和resource，在classpath后面写上配置文件的名字
        -->
        <init-param>
            <param-name>contextConfigLocation</param-name>
            <param-value>classpath:springMVC.xml</param-value>
        </init-param>
        <!--servlet默认在第一次访问时初始化，而我们的前端控制器中对所有请求的处理，所以在初始化的时候需要来执行很多内容
        如果我们把当前这众多初始化的内容全部都放在第一次访问时初始化，这就会严重影响第一次访问的速度
        所以此时就可以再加上一个标签：load-on-startup，将SpringMVC的前端控制器DispatcherServlet的初始化时间提前到服务器启动时-->
        <load-on-startup>1</load-on-startup>
    </servlet>

    <servlet-mapping>
        <servlet-name>SpringMVC</servlet-name>
        <url-pattern>/</url-pattern>
    </servlet-mapping>
</web-app>
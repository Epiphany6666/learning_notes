<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/mvc
       http://www.springframework.org/schema/mvc/spring-mvc.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd">

    <context:component-scan base-package="com.atguigu.mvc"></context:component-scan>

    <!-- 配置Thymeleaf视图解析器
    这里配置的视图解析器就是ThymeleafViewResolver，它就是来解析我们当前的ThymeLeaf视图的
    -->
    <bean id="viewResolver" class="org.thymeleaf.spring5.view.ThymeleafViewResolver">
        <!-- order：来设置当前视图解析器的优先级
        从这个属性上来看，就知道我们的视图解析器是可以配置多个的。
        -->
        <property name="order" value="1"/>
        <!--        解析视图所用的编码-->
        <property name="characterEncoding" value="UTF-8"/>
        <!--        当前的一个模板-->
        <property name="templateEngine">
            <!--   注意看！这里是内部bean，为templateEngine整个属性赋值
            整个内部bean就是我们当前来解析当前视图层的一个策略
            -->
            <bean class="org.thymeleaf.spring5.SpringTemplateEngine">
                <property name="templateResolver">
                    <bean class="org.thymeleaf.spring5.templateresolver.SpringResourceTemplateResolver">
                        <!-- 视图前缀
                        Thymeleaf在设置视图解析时，必须要设置视图前缀和试图后缀
                        然后把我们当前的视图名称来加上前缀和后缀，最终就可以跳转到我们所指定的页面
                        -->
                        <property name="prefix" value="/WEB-INF/templates/"/>

                        <!-- 视图后缀 -->
                        <property name="suffix" value=".html"/>
                        <!--                        templateMode：我们所使用的模板的一个模型，我们所使用的是html5-->
                        <property name="templateMode" value="HTML5"/>
                        <!--                        characterEncoding：当前页面中的一个编码，这里用的是UTF-8-->
                        <property name="characterEncoding" value="UTF-8" />
                    </bean>
                </property>
            </bean>
        </property>
    </bean>

    <mvc:annotation-driven />
    <mvc:default-servlet-handler />
    <mvc:view-controller path="/" view-name="index"></mvc:view-controller>

<!--    配置拦截器
    <mvc:interceptors>
&lt;!&ndash;        <bean class="com.atguigu.mvc.interceptors.FirstInterceptor"></bean>&ndash;&gt;
&lt;!&ndash;        <ref bean="firstInterceptor"></ref>&ndash;&gt;
        &lt;!&ndash;<mvc:interceptor>
            <mvc:mapping path="/**"/>
            <mvc:exclude-mapping path="/"/>
            <ref bean="firstInterceptor"></ref>
        </mvc:interceptor>&ndash;&gt;
        <ref bean="firstInterceptor"></ref>
        <ref bean="secondInterceptor"></ref>
    </mvc:interceptors>-->

    <!--配置异常处理-->
    <bean class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
        <!--exceptionMappings是Properties类型的，而Properties继承了HashTable，是键值对的结构 -->
        <property name="exceptionMappings">
            <!--
        		properties的键表示处理器方法执行过程中出现的异常
        		properties的值表示若出现指定异常时，设置一个新的视图名称，跳转到指定页面
        	-->
            <!--Properties就是通过props标签来进行赋值的，而props里面可以设置prop
            -->
            <props>
                <!--exceptionAttribute属性设置一个属性名，将出现的异常信息在请求域中进行共享-->
                <!--
                其中的value属性设置的就是视图名称，它是遵循我们讲过的视图的规则的
                如果不设置任何前缀，那视图仍然是被thymeleafResolver解析
                如果设置前缀，就会创建相对的视图
                -->
                <prop key="java.lang.ArithmeticException">error</prop>
            </props>
        </property>
        <!--如果想要展示错误信息，可以再设置一个属性：exceptionAttribute
        设置这个属性后，我们就可以设置一个键，来存储里面的异常信息，默认存储到请求域
        value设置的就是存储到请求域中的异常信息的键
        -->
        <property name="exceptionAttribute" value="ex"></property>
    </bean>
</beans>